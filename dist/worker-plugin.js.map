{"version":3,"file":"worker-plugin.js","sources":["../src/index.js"],"sourcesContent":["/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport path from 'path';\nimport ParserHelpers from 'webpack/lib/ParserHelpers';\nimport WORKER_PLUGIN_SYMBOL from './symbol';\n\nconst NAME = 'WorkerPlugin';\nconst JS_TYPES = ['auto', 'esm', 'dynamic'];\nconst workerLoader = path.resolve(__dirname, 'loader.js');\n\nexport default class WorkerPlugin {\n  constructor (options) {\n    this.options = options || {};\n    this[WORKER_PLUGIN_SYMBOL] = true;\n  }\n\n  apply (compiler) {\n    compiler.hooks.normalModuleFactory.tap(NAME, factory => {\n      let workerId = 0;\n      for (const type of JS_TYPES) {\n        factory.hooks.parser.for(`javascript/${type}`).tap(NAME, parser => {\n          const handleWorker = workerTypeString => expr => {\n            const dep = parser.evaluateExpression(expr.arguments[0]);\n\n            if (!dep.isString()) {\n              parser.state.module.warnings.push({\n                message: `new ${workerTypeString}() will only be bundled if passed a String.`\n              });\n              return false;\n            }\n\n            const optsExpr = expr.arguments[1];\n            let typeModuleExpr;\n            let opts;\n            if (optsExpr) {\n              opts = {};\n              for (let i = optsExpr.properties.length; i--;) {\n                const prop = optsExpr.properties[i];\n                if (prop.type === 'Property' && !prop.computed && !prop.shorthand && !prop.method) {\n                  opts[prop.key.name] = parser.evaluateExpression(prop.value).string;\n\n                  if (prop.key.name === 'type') {\n                    typeModuleExpr = prop;\n                  }\n                }\n              }\n            }\n\n            if (!opts || opts.type !== 'module') {\n              parser.state.module.warnings.push({\n                message: `new ${workerTypeString}() will only be bundled if passed options that include { type: 'module' }.${opts ? `\\n  Received: new ${workerTypeString}()(${JSON.stringify(dep.string)}, ${JSON.stringify(opts)})` : ''}`\n              });\n              return false;\n            }\n\n            const loaderOptions = { name: opts.name || workerId + '' };\n            const req = `require(${JSON.stringify(workerLoader + '?' + JSON.stringify(loaderOptions) + '!' + dep.string)})`;\n            const id = `__webpack__worker__${workerId++}`;\n            ParserHelpers.toConstantDependency(parser, id)(expr.arguments[0]);\n\n            if (this.options.workerType) {\n              ParserHelpers.toConstantDependency(parser, JSON.stringify(this.options.workerType))(typeModuleExpr.value);\n            } else if (this.options.preserveTypeModule !== true) {\n              // Options object can contain comma at the end e.g. `{ type: 'module', }`.\n              // Previously, `type` property was replaced with an empty string\n              // that left this comma.\n              // Currently the `type` property value is replaced with `undefined`.\n              ParserHelpers.toConstantDependency(parser, 'type:undefined')(typeModuleExpr);\n            }\n\n            return ParserHelpers.addParsedVariableToModule(parser, id, req);\n          };\n          \n          if (this.options.worker === undefined || this.options.worker) {\n            parser.hooks.new.for('Worker').tap(NAME, handleWorker('Worker'));\n          }\n          if (this.options.sharedWorker) {\n            parser.hooks.new.for('SharedWorker').tap(NAME, handleWorker('SharedWorker'));\n          }\n        });\n      }\n    });\n  }\n}\n"],"names":["const","NAME","JS_TYPES","workerLoader","path","resolve","__dirname","WorkerPlugin","constructor","options","WORKER_PLUGIN_SYMBOL","apply","compiler","hooks","normalModuleFactory","tap","factory","workerId","type","parser","for","handleWorker","workerTypeString","expr","dep","evaluateExpression","arguments","isString","state","module","warnings","push","message","optsExpr","typeModuleExpr","opts","let","i","properties","length","prop","computed","shorthand","method","key","name","value","string","JSON","stringify","loaderOptions","req","id","ParserHelpers","toConstantDependency","this","workerType","preserveTypeModule","addParsedVariableToModule","worker","undefined","new","sharedWorker"],"mappings":"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"}